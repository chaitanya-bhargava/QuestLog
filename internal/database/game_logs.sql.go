// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: game_logs.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createGameLog = `-- name: CreateGameLog :one
INSERT INTO game_logs(id,created_at,updated_at,game_id,user_id,shelf,rating)
VALUES ($1,$2,$3,$4,$5,$6,$7)
ON CONFLICT(game_id,user_id)
DO UPDATE SET updated_at=CURRENT_TIMESTAMP,shelf=$6,rating=$7
RETURNING id, created_at, updated_at, game_id, user_id, shelf, rating
`

type CreateGameLogParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	GameID    int32
	UserID    string
	Shelf     string
	Rating    int32
}

func (q *Queries) CreateGameLog(ctx context.Context, arg CreateGameLogParams) (GameLog, error) {
	row := q.db.QueryRowContext(ctx, createGameLog,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.GameID,
		arg.UserID,
		arg.Shelf,
		arg.Rating,
	)
	var i GameLog
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GameID,
		&i.UserID,
		&i.Shelf,
		&i.Rating,
	)
	return i, err
}

const deleteGameLogByGameID = `-- name: DeleteGameLogByGameID :exec
DELETE FROM game_logs WHERE game_id=$1 AND user_id=$2
`

type DeleteGameLogByGameIDParams struct {
	GameID int32
	UserID string
}

func (q *Queries) DeleteGameLogByGameID(ctx context.Context, arg DeleteGameLogByGameIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteGameLogByGameID, arg.GameID, arg.UserID)
	return err
}

const getGameLogByGameID = `-- name: GetGameLogByGameID :one
SELECT id, created_at, updated_at, game_id, user_id, shelf, rating FROM game_logs WHERE game_id=$1 AND user_id=$2
`

type GetGameLogByGameIDParams struct {
	GameID int32
	UserID string
}

func (q *Queries) GetGameLogByGameID(ctx context.Context, arg GetGameLogByGameIDParams) (GameLog, error) {
	row := q.db.QueryRowContext(ctx, getGameLogByGameID, arg.GameID, arg.UserID)
	var i GameLog
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GameID,
		&i.UserID,
		&i.Shelf,
		&i.Rating,
	)
	return i, err
}
